{ -*- buffer-read-only: t -*-

  Copyright 2015-2017 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in nodes_specification/components/ ,
  - and regenerate include files by running
    nodes_specification/x3d-nodes-to-pascal/x3d-nodes-to-pascal.lpr .

  The documentation for properties should go to x3dnodes_documentation.txt . }

{$ifdef read_interface}

  strict private
    function GetClosed: boolean;
    procedure SetClosed(const Value: boolean);
    function GetNormalizeVelocity: boolean;
    procedure SetNormalizeVelocity(const Value: boolean);
  public
    property Closed: boolean read GetClosed write SetClosed;
    procedure SetKeyValue(const Value: array of TVector3);
    procedure SetKeyValue(const Value: TVector3List);
    procedure SetKeyVelocity(const Value: array of TVector3);
    procedure SetKeyVelocity(const Value: TVector3List);
    property NormalizeVelocity: boolean read GetNormalizeVelocity write SetNormalizeVelocity;

{$endif read_interface}

{$ifdef read_implementation}

{ TSplinePositionInterpolatorNode ----------------------------------------------- }

function TSplinePositionInterpolatorNode.GetClosed: boolean;
begin
  Result := FdClosed.Value;
end;

procedure TSplinePositionInterpolatorNode.SetClosed(const Value: boolean);
begin
  FdClosed.Send(Value);
end;

procedure TSplinePositionInterpolatorNode.SetKeyValue(const Value: array of TVector3);
begin
  FdKeyValue.Send(Value);
end;

procedure TSplinePositionInterpolatorNode.SetKeyValue(const Value: TVector3List);
begin
  FdKeyValue.Send(Value);
end;

procedure TSplinePositionInterpolatorNode.SetKeyVelocity(const Value: array of TVector3);
begin
  FdKeyVelocity.Send(Value);
end;

procedure TSplinePositionInterpolatorNode.SetKeyVelocity(const Value: TVector3List);
begin
  FdKeyVelocity.Send(Value);
end;

function TSplinePositionInterpolatorNode.GetNormalizeVelocity: boolean;
begin
  Result := FdNormalizeVelocity.Value;
end;

procedure TSplinePositionInterpolatorNode.SetNormalizeVelocity(const Value: boolean);
begin
  FdNormalizeVelocity.Send(Value);
end;

{$endif read_implementation}
